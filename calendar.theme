<?php
// $Id$

/**
 * @addtogroup themeable
 * @{
 */
/**
 * Calendar summary display.
 *
 * Intercept arguments before calendar and return their summary view,
 * Otherwise return calendar view.
 */
function theme_calendar_view_summary(&$view, $type, $level, &$items, $args) {
  if (!calendar_is_calendar_arg($view)) {
    return theme('views_summary', $view, $type, $level, $items, $args);
  }
  else {
    return theme('calendar_view_calendar', $view, $items, $type);
  }
}

/**
 * Calendar Views plugin theme, overrides default views theme
 * to create a calendar view.
 */
function theme_calendar_view_calendar(&$view, &$items, $type) {
  include_once(drupal_get_path('module', 'calendar') .'/calendar.inc');
  if ($type == 'block' || !calendar_is_calendar_arg($view)) {
    $view->calendar_type = 'month';
  }
  $links = $view->build_type == 'block' ? FALSE : TRUE;
  if ($type == 'block' || $view->calendar_type == 'year') $view->mini = TRUE;

  $params['url'] = calendar_real_url($view, $view->args);
  $params['append'] = calendar_url_append($view);
  $params['stripe'] = 'stripe';

  // Set to TRUE to see week numbers in each row.
  $params['with_weekno'] = $view->build_type == 'block' || $view->calendar_type == 'year' || $view->year < 1970 ? FALSE : TRUE;

  return calendar_build_calendar($view, $items, $params);
}

/**
 * Display the nodes of a view as a list.
 */
function theme_calendar_view_list($view, $nodes, $type) {
  $fields = _views_get_fields();
  $items = array();
  foreach ($nodes as $node) {
    $item = '';
    foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== FALSE) {
        if ($field['label']) {
          $item .= "<div class='view-label ". views_css_safe('view-label-'. $field['queryname']) ."'>" . $field['label'] . "</div>";
        }
        $item .= "<div class='view-field ". views_css_safe('view-data-'. $field['queryname']) ."'>" . views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view) . "</div>";
      }
    }
    $items[] = "<div class='view-item ". views_css_safe('view-item-'. $view->name) ."'>$item</div>\n"; // l($node->title, "node/$node->nid");
  }
  if ($items) {
   	return theme('item_list', $items);
  }
}

/**
 * Display the nodes of a view as a table.
 */
function theme_calendar_view_table($view, $nodes, $type) {
  $fields = _views_get_fields();
  $rows = array();
  foreach ($nodes as $node) {
    $row = array();
    foreach ($view->field as $field) {
      if ($fields[$field['id']]['visible'] !== FALSE) {
        $cell['data'] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
        $cell['class'] = "view-field ". views_css_safe('view-field-'. $field['queryname']);
        $row[] = $cell;
      }
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows);
}

/**
 * Display the nodes of a view as teasers.
 */
function theme_calendar_view_teasers($view, $nodes, $type) {
  return views_theme('calendar_view_nodes', $view, $nodes, 'teasers');
}

/**
 * Display the nodes of a view as plain nodes.
 */
function theme_calendar_view_nodes($view, $nodes, $type, $teasers = false, $links = true) {
	$output = array();
  foreach ($nodes as $n) {
    $node = node_load($n->nid);
    $output[] = node_view($node, $teasers, false, $links);
  }
  return implode($output);
}

/**
 * Format a from/to date in the calendar view.
 */
function theme_calendar_date_combo($node, $format, $label, $view) {
  $date1 = date_format_date($node->calendar_start_date, 'custom', $format);
  $date2 = date_format_date($node->calendar_end_date, 'custom', $format);

  $label = '<h4>'. $label .'</h4>';

  // No date values, display nothing.
  if (empty($date1) && empty($date2)) {
    $output = '';
  }
  // From and To dates match or there is no To date, display a complete single date.
  elseif ($date1 == $date2 || empty($date2)) {
    $output = $label .'<span class="date-display-single">'. $date1 .'</span>';
  }
  // Same day, different times, don't repeat the date but show both From and To times.
  elseif (date_format($node->calendar_start_date, 'H:i:s') != date_format($node->calendar_end_date, 'H:i:s')) {
    $output = $label .'<span class="date-display-single">'. $dates['value']['formatted_date'] .'</span> '.
      '<span class="date-display-start">'. $dates['value']['formatted_time'] .'</span>'.
      '<span class="date-display-separator"> - </span>'.
      '<span class="date-display-end">'. $dates['value2']['formatted_time'] .'</span>';
  }
  // Different days, display both in their entirety.
  else {
    $output = $label .'<span class="date-display-start">'. $date1 .'</span>'.
      '<span class="date-display-separator"> - </span>'.
      '<span class="date-display-end">'. $date2 .'</span>';
  }
  return $output;
}

/**
 * Theme the calendar page title.
 *
 * Views defaults to displaying the title of the last argument in the
 * view, rather than the View title or other values. Use this theme
 * to override that behavior.
 *
 * $view->build_type indicates whether this view is being rendered as a page
 * or a block, use that to handle the title differently for each.
 *
 * views_get_title() $context can be:
 *  'page' - The title that goes with the last argument in $args.
 *  'menu' - The value in View Menu Title.
 *
 * or just use the values of:
 *  $view->page_title,
 *  $view->menu_title,
 *  $view->block_title.
 */
function theme_calendar_page_title($view, $items, $output) {
  switch ($view->build_type) {
    case 'page':
      return views_get_title($view, $context = 'page', $args = $view->real_args);
    case 'block':
      return $view->block_title;
  }
}

/**
 * Theme the calendar title and breadcrumbs
 *   Arguments are evaluated in year, month, day or year, week order
 *   so you can track previous values in the session.
 *
 * @param string $field_type - 'YEAR', 'MONTH', 'DAY', 'WEEK'
 * @param integer $value - the current number for the field type as selected in the view argument.
 * @return string formatted title
 */
function theme_calendar_arg_title($field_type, $value, $query) {
  $view = $GLOBALS['current_view'];
  $value = intval(check_plain($value));
  if (empty($value)) {
    if ($view->month) {
      return date_format_date($view->min_date, 'custom', 'F Y');
    }
    elseif ($view->year) {
     return $view->year;
    }
	}
	else {
	  switch ($field_type) {
    case 'YEAR':
      $view->year = $value;
      return $view->year;
    case 'MONTH':
      return date_format_date($view->min_date, 'custom', 'F');
    case 'DAY':
      return date_format_date($view->min_date, 'custom', 'l, F j Y');
    case 'WEEK':
    	return t('Week of @date', array('@date' => date_format($view->min_date, 'F j')));
   }
	}
}

/**
 * Theme the navigation bar title
 *
 * @param string $field_type - 'YEAR', 'MONTH', 'DAY', 'WEEK'
 * @param object $view - the current view object
 * @return formatted title
 */
function theme_calendar_nav_title($field_type, $view) {
  $date = date_make_date($view->year .'-'. ($view->month != CALENDAR_EMPTY_ARG ? $view->month : '01') .'-01 00:00:00', 'UTC');
  if ($view->mini) {
  	// Month navigation titles are used as links in the mini view.
    return l(date_format_date($date, 'custom', 'M Y'), $view->real_url .'/'. $view->year .'/'. $view->month, array(), calendar_url_append($view));
  }
  else {
    // Otherwise, just show the date.
    return date_format_date($date, 'custom', 'M Y');
  }
}

/**
 * Links at the top of the calendar.
 *
 * @param links
 *   TRUE/FALSE, should links be shown.
 * @param view
 *   The current view being rendered
 */
function theme_calendar_links($view, $links = FALSE) {
  $now = date_now();
  // add links to the top of the calendar to switch from one view to another
  if ($links) {
    $view->real_url = calendar_real_url($view, $view->args);
    $base_url = $view->real_url .'/'. $view->year;
    $view->month    = $view->month && $view->month != CALENDAR_EMPTY_ARG ? $view->month : date_format($now, 'm');
    $view->day      = $view->day && $view->day != CALENDAR_EMPTY_ARG ? $view->day : date_format($now, 'j');
    if (empty($view->week) || $view->week == CALENDAR_EMPTY_ARG) {
      $template = calendar_year_template($view->year);
      $compare = date_pad($view->month) .'-'. date_pad($view->day);
      $view->week = db_result(db_query("SELECT weekno FROM {calendar_templates} WHERE template = %d AND start <= '%s' AND end >= '%s'", $template, $compare, $compare));
    }

    $append = calendar_url_append($view);
    if ($_GET['view']) {
      $append .= '&view='. $_GET['view'];
    }

    $calendar_links[] = array('title' => t('Year'), 'href' => $view->real_url .'/'. $view->year, 'query' => $append);
    $calendar_links[] = array('title' => t('Month'), 'href' => $view->real_url .'/'. $view->year .'/'. $view->month , 'query' => $append);
    $calendar_links[] = array('title' => t('Week'), 'href' => $view->real_url .'/'. $view->year .'/W'. $view->week, 'query' => $append);
    $calendar_links[] = array('title' => t('Day'), 'href' => $view->real_url .'/'. $view->year .'/'. $month .'/'. $day, 'query' => $append);

    // If the Date Popup module is enabled, add a popup date selector.
    if (module_exists('date_popup')) {
      $output = '<div class="clear-block">'. calendar_date_select($view) .'</div>';
    }
   $output .= theme('links', $calendar_links);
   return $output;
  }
}

/**
 * Format the 'next' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_next($url, $text = TRUE, $querystring = NULL) {
  return '<span class="next">'. l(($text ? t('next') : '') .' Â»', $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 * Format the 'previous' navigation controls for calendar calendars
 *
 * @param link
 *   The url for the navigation
 */
function theme_calendar_nav_prev($url, $text = TRUE, $querystring = NULL) {
  return '<span class="prev">'. l('Â« '. ($text ? t('prev') : ''), $url, array(), (!empty($querystring) ? $querystring : NULL)) .'</span>';
}

/**
 * Format a node stripe legend
 */
function theme_calendar_stripe_legend($stripe_labels) {
  $header = array(
      array('class' => 'legend', 'data' => t('Item')),
      array('class' => 'legend', 'data' => t('Key'))
      );
  foreach ($stripe_labels as $stripe => $label) {
    $node = new StdClass();
    $node->stripe = $stripe;
    $rows[] = array($label, theme('calendar_stripe_stripe', $node), array('class' => 'stripe'));
  }
  $output = theme('table', $header, $rows, array('class' => 'mini'));
  return $output;
}

/**
 * Format node stripes
 * Add key value to text, then hide it with css for accessibility to screen readers
 */
function theme_calendar_stripe_stripe($node) {
  static $stripe, $stripe_map;

  if(!$stripe_map[$node->stripe]) {
    if($stripe >= 10) {
      $stripe = 1;
    }
    else {
      $stripe++;
    }
    $stripe_map[$node->stripe] = $stripe;
  }

  $output .= '<div class="stripe-'. $stripe_map[$node->stripe] .'" title="Key: '.$stripe_map[$node->stripe] .'"><span class="stripe">Key '.$stripe_map[$node->stripe] .'</span></div>'."\n";
  return $output;
}

/**
 * Format a year view
 */
function theme_calendar_year($op, $header, $month_rows) {
  $output = '<div class="calendar-calendar"><div class="year-view">';
  foreach ($month_rows as $year => $month) {
    $output .= $year;
    foreach ($month as $month_name => $rows) {
      $output .= '<div class="mini">'. $month_name .'</div>';
      $header = array_shift($rows);
      $output .= '<div class="mini-row">'. theme('table', $header, $rows) .'</div>';
    }
  }
  $output .= "</div></div>\n";
  return $output;
}

/**
 * Format a month view
 */
function theme_calendar_month($op, $header, $rows) {
  $attrs = array();
  if ($op == 'mini') {
    $attrs = array('class' => 'mini');
  }
  $output = theme("table", $header, $rows, $attrs);
  return '<div class="calendar-calendar"><div class="month-view">'. $output ."</div></div>\n";
}

/**
 * Format a week view
 */
function theme_calendar_week($op, $header, $rows) {
  $output = theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="week-view">'. $output ."</div></div>\n";
}

/**
 * Format a day view
 */
function theme_calendar_day($op, $header, $rows) {
  $output = theme("table", $header, $rows);
  return '<div class="calendar-calendar"><div class="day-view">'. $output ."</div></div>\n";
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_day($node) {
  if (is_object($node->calendar_start_date)) {
    $output = '<div class="calendar dayview">'."\n";
    $output .= theme('calendar_stripe_stripe', $node);
    $output .= '<h2 class="title">'. l($node->title, "$node->url", array('title' => t('view this item'))) .'</h2>'."\n";
    $output .= '<div class="times">';
    $output .= '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
    if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
      $output .= '<span class="end"> - '. date_format($node->calendar_end_date, $node->format_time) .'</span>'."\n";
    }
    $output .= '</div>';
    if ($node->teaser) {
      $output .= '<div class="content">'. ($node->teaser) ."</div>\n";
    }
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_week($node) {
  $output .= '<div class="calendar weekview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);

  switch ($node->calendar_state) {
    case 'singleday':
        $times = '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
        if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
          $times .= '<span class="end"> - '. date_format($node->calendar_end_date, $node->format_time) .'</span>'."\n";
        }
      break;
    case 'start':
        $times = '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
      break;
    case 'end':
        $times = '<span class="end">'. date_format($node->calendar_end_date, $node->format_time) .'</span>'."\n";
      break;
    case 'ongoing':
        $times = '<span class="ongoing">'. t('all day') .'</span>'."\n";
      break;
  }

  $output .= '<div class="title">'. l($node->title, "$node->url", array('title' => t('view this item'))) .'</div>'."\n";
  $output .= '<div class="times">'. $times .'</div>';
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Format an calendar node for display in an expanded calendar, like a calendar page
 *
 * @param node
 *   The node being displayed
 */
function theme_calendar_node_month($node) {

  $output .= '<div class="calendar monthview">'."\n";
  $output .= theme('calendar_stripe_stripe', $node);

  switch ($node->calendar_state) {
    case 'singleday':
      if ($node->calendar_start != $node->calendar_end) {
        $times = '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
      }
      if ($node->calendar_start != $node->calendar_end && $node->calendar_end) {
        $times .= '<span class="end"> - '. date_format($node->calendar_end_date, $node->format_time) .'</span>'."\n";
      }
      else {
        $times = '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
      }
      break;
    case 'start':
        $times = '<span class="start">'. date_format($node->calendar_start_date, $node->format_time) .'</span>'."\n";
      break;
    case 'end':
        $times = '<span class="end">'. date_format($node->calendar_end_date, $node->format_time) .'</span>'."\n";
      break;
    case 'ongoing':
        $times = '<span class="ongoing">'. t('all day') .'</span>'."\n";
      break;
  }
  // Force spaces into titles wherever possible so long unbroken title strings
  // won't screw up the calendar layout.
  $replace = array('-' => '- ', ':' => ': ', ';' => '; ', '/' => '/ ', ',' => ', ', '.' => '. ');
  $output .= '<div class="title">'. l(strtr($node->title, $replace), $node->url, array('title' => t('view this item'))) .'</div>';
  $output .= '<div class="times">'. $times .'</div>';
  $output .= $node->teaser;
  $output .= '</div>' . "\n";

  return $output;
}

/**
 * Format an date's day box in a calendar
 *
 * @param date
 *   The day to display in YYYY-MM-DD format.
 */
function theme_calendar_date_box($date, $view, $params, $selected = FALSE) {
  $parts = explode('-', substr($date, 0, 10));
  $year = $parts[0];
  $month = intval($parts[1]);
  $day = intval($parts[2]);
  $mini = $view->mini;
  $url = $params['url'] .'/'. $year .'/'. $month .'/'. $day;
  $append = $params['append'];

  if ($mini) {
    if ($selected) {
      return '<div class="mini-day-on">'. l($day, $url, NULL, $append) .'</div>';
    }
    else {
      return '<div class="mini-day-off">'. l($day, $url, NULL, $append) .'</div>';
    }
  }
  switch ($view->calendar_type) {
    case 'table':
      $output = '<div class="day">'. l(t('!month / !day', array('!month' => $month, '!day' => $day)), $url, NULL, $append) .'</div>'."\n";
      break;
    case 'list':
      $date = date_create($year .'-'. date_pad($month) .'-'. date_pad($day), date_default_timezone());
      $output = '<div class="day">'. l(date_format_date($date, 'custom', 'l, F j, Y'), $url, NULL, $append) .'</div>'."\n";
      break;
    case 'day':
     break;
    default:
      $output = '<div class="day">'. l($day, $url, NULL, $append) .'</div>'."\n";
      break;
  }
  return $output;
}

/**
 * Format an empty day on a calendar
 *
 * @param day
 *   The day to display.
 */
function theme_calendar_empty_day() {
  return '<div class="calendar-empty">&nbsp;</div>'."\n";
}


/** @} End of addtogroup themeable */